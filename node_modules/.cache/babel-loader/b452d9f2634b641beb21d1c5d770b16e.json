{"ast":null,"code":"var _jsxFileName = \"D:\\\\School\\\\Layer Zero\\\\Side Projects\\\\Angel's Site Work\\\\Quiz\\\\quiz\\\\src\\\\quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport questionDatabase from './data';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Quiz() {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [quizCompleted, setQuizCompleted] = useState(false);\n  const [showCorrectAnswer, setShowCorrectAnswer] = useState(false);\n  function handleAnswerOptionClick(isCorrect) {\n    if (isCorrect) setCurrentScore(currentScore + 1);\n    var nextQuestion = currentQuestion + 1;\n    if (nextQuestion == questionDatabase.length) setQuizCompleted(true);\n    setCurrentQuestion(nextQuestion);\n  }\n\n  //Builds array with all answers of current question and shuffles it\n  function shuffleAnswers() {\n    //fill answers array with all incorrect answers and correct answer\n    var answers = [];\n    for (let i = 0; i < questionDatabase[currentQuestion].incorrectAnswers.length; i++) answers.push(questionDatabase[currentQuestion].incorrectAnswers[i]);\n    answers.push(questionDatabase[currentQuestion].correctAnswer);\n    let currentIndex = answers.length,\n      randomIndex;\n    while (currentIndex != 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [answers[currentIndex], answers[randomIndex]] = [answers[randomIndex], answers[currentIndex]];\n    }\n    return answers;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-screen\",\n    children: quizCompleted ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-count\",\n          children: [\" Question \", currentQuestion + 1, \" / \", questionDatabase.length, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"question-text\",\n          children: [\" \", questionDatabase[currentQuestion].question, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answer-section\",\n        children: shuffleAnswers().map(answerOption => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAnswerOptionClick(answerOption === questionDatabase[currentQuestion].correctAnswer),\n          children: answerOption\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score-section\",\n        children: [\"Current Score: \", currentScore, \"/\", currentQuestion]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(Quiz, \"0JOt5dlKfe2vpzHTcwfG/llZfDA=\");\n_c = Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","questionDatabase","Quiz","currentQuestion","setCurrentQuestion","currentScore","setCurrentScore","quizCompleted","setQuizCompleted","showCorrectAnswer","setShowCorrectAnswer","handleAnswerOptionClick","isCorrect","nextQuestion","length","shuffleAnswers","answers","i","incorrectAnswers","push","correctAnswer","currentIndex","randomIndex","Math","floor","random","question","map","answerOption"],"sources":["D:/School/Layer Zero/Side Projects/Angel's Site Work/Quiz/quiz/src/quiz.js"],"sourcesContent":["import React, {useState} from 'react'\r\nimport questionDatabase from './data'\r\n\r\nexport default function Quiz(){\r\n    \r\n    const [currentQuestion, setCurrentQuestion] = useState(0);\r\n    const [currentScore, setCurrentScore] = useState(0);\r\n    const [quizCompleted, setQuizCompleted] = useState(false);\r\n    const [showCorrectAnswer, setShowCorrectAnswer] = useState(false);\r\n    \r\n\r\n    function handleAnswerOptionClick(isCorrect){\r\n        if (isCorrect)\r\n            setCurrentScore(currentScore + 1);\r\n\r\n        var nextQuestion = currentQuestion + 1;\r\n        if (nextQuestion == questionDatabase.length)\r\n            setQuizCompleted(true);\r\n        \r\n        setCurrentQuestion(nextQuestion);\r\n    }\r\n\r\n    //Builds array with all answers of current question and shuffles it\r\n    function shuffleAnswers()\r\n    {\r\n        //fill answers array with all incorrect answers and correct answer\r\n        var answers = []\r\n        for (let i = 0; i < questionDatabase[currentQuestion].incorrectAnswers.length; i++)\r\n            answers.push(questionDatabase[currentQuestion].incorrectAnswers[i]);\r\n        \r\n        answers.push(questionDatabase[currentQuestion].correctAnswer);\r\n\r\n        let currentIndex = answers.length,  randomIndex;\r\n        \r\n        while (currentIndex != 0) {\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex--;\r\n        \r\n            [answers[currentIndex], answers[randomIndex]] = [\r\n            answers[randomIndex], answers[currentIndex]];\r\n        }\r\n\r\n        return answers;\r\n    }\r\n\r\n\r\n    return(\r\n        <div className='quiz-screen'>\r\n            {quizCompleted ? (\r\n                <></>\r\n            ) : (\r\n                <>\r\n                    <div className='question-section'>\r\n                        <div className='question-count'> Question {currentQuestion+1} / {questionDatabase.length} </div>\r\n                        <div className='question-text'> {questionDatabase[currentQuestion].question} </div>\r\n                    </div>\r\n\r\n                    <div className='answer-section'>\r\n                        {shuffleAnswers().map((answerOption) => (\r\n                            <button onClick={() => handleAnswerOptionClick(answerOption === questionDatabase[currentQuestion].correctAnswer)}>\r\n                                {answerOption}\r\n                            </button>\r\n                        ))} \r\n                    </div>\r\n\r\n                    <div className='score-section'>\r\n                        Current Score: {currentScore}/{currentQuestion}\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAOC,gBAAgB,MAAM,QAAQ;AAAA;AAAA;AAErC,eAAe,SAASC,IAAI,GAAE;EAAA;EAE1B,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGJ,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAM,CAACK,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACS,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAGjE,SAASW,uBAAuB,CAACC,SAAS,EAAC;IACvC,IAAIA,SAAS,EACTN,eAAe,CAACD,YAAY,GAAG,CAAC,CAAC;IAErC,IAAIQ,YAAY,GAAGV,eAAe,GAAG,CAAC;IACtC,IAAIU,YAAY,IAAIZ,gBAAgB,CAACa,MAAM,EACvCN,gBAAgB,CAAC,IAAI,CAAC;IAE1BJ,kBAAkB,CAACS,YAAY,CAAC;EACpC;;EAEA;EACA,SAASE,cAAc,GACvB;IACI;IACA,IAAIC,OAAO,GAAG,EAAE;IAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,gBAAgB,CAACE,eAAe,CAAC,CAACe,gBAAgB,CAACJ,MAAM,EAAEG,CAAC,EAAE,EAC9ED,OAAO,CAACG,IAAI,CAAClB,gBAAgB,CAACE,eAAe,CAAC,CAACe,gBAAgB,CAACD,CAAC,CAAC,CAAC;IAEvED,OAAO,CAACG,IAAI,CAAClB,gBAAgB,CAACE,eAAe,CAAC,CAACiB,aAAa,CAAC;IAE7D,IAAIC,YAAY,GAAGL,OAAO,CAACF,MAAM;MAAGQ,WAAW;IAE/C,OAAOD,YAAY,IAAI,CAAC,EAAE;MACtBC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGJ,YAAY,CAAC;MACtDA,YAAY,EAAE;MAEd,CAACL,OAAO,CAACK,YAAY,CAAC,EAAEL,OAAO,CAACM,WAAW,CAAC,CAAC,GAAG,CAChDN,OAAO,CAACM,WAAW,CAAC,EAAEN,OAAO,CAACK,YAAY,CAAC,CAAC;IAChD;IAEA,OAAOL,OAAO;EAClB;EAGA,oBACI;IAAK,SAAS,EAAC,aAAa;IAAA,UACvBT,aAAa,gBACV,qCAAK,gBAEL;MAAA,wBACI;QAAK,SAAS,EAAC,kBAAkB;QAAA,wBAC7B;UAAK,SAAS,EAAC,gBAAgB;UAAA,yBAAYJ,eAAe,GAAC,CAAC,SAAKF,gBAAgB,CAACa,MAAM;QAAA;UAAA;UAAA;UAAA;QAAA,QAAQ,eAChG;UAAK,SAAS,EAAC,eAAe;UAAA,gBAAGb,gBAAgB,CAACE,eAAe,CAAC,CAACuB,QAAQ;QAAA;UAAA;UAAA;UAAA;QAAA,QAAQ;MAAA;QAAA;QAAA;QAAA;MAAA,QACjF,eAEN;QAAK,SAAS,EAAC,gBAAgB;QAAA,UAC1BX,cAAc,EAAE,CAACY,GAAG,CAAEC,YAAY,iBAC/B;UAAQ,OAAO,EAAE,MAAMjB,uBAAuB,CAACiB,YAAY,KAAK3B,gBAAgB,CAACE,eAAe,CAAC,CAACiB,aAAa,CAAE;UAAA,UAC5GQ;QAAY;UAAA;UAAA;UAAA;QAAA,QAEpB;MAAC;QAAA;QAAA;QAAA;MAAA,QACA,eAEN;QAAK,SAAS,EAAC,eAAe;QAAA,8BACVvB,YAAY,OAAGF,eAAe;MAAA;QAAA;QAAA;QAAA;MAAA,QAC5C;IAAA;EAEb;IAAA;IAAA;IAAA;EAAA,QACC;AAEd;AAAC,GArEuBD,IAAI;AAAA,KAAJA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module"}